---
layout: "post"
title: "关于两种CI/CD策略以及git分支模型的思考"
description: "Thinking in two CI/CD strategies and git branch models"
date: "2016-11-26 15:00"
published: false
comments: true
tags: [git, CD]
category: DevOps
imagefeature: wj/5.jpg
---

&emsp;&emsp;近两个月由于个人处于新环境、新项目的适应阶段，没怎么提笔写些文章。中间有好几个想法想记录下来分享，但受限于没有很好的时间段供自己总结思考（也可以总结为间歇性懒癌和剧癌发作），便啥也没有更新。借这个周末闲适的下午和明媚的阳光，决定把近来项目上的**CI/CD（持续集成/持续交付）策略**以及**git分支模型**和以前的项目做一下分析比较，希望对各位有所帮助，也能有所思考，尤其是那些期望**搭建项目部署流水线**或者想**了解git分支模型**的开发、运维人员。

<!--more-->

## 背景
&emsp;&emsp;废话不多说，由于近期做了N次release，所以对自己目前所处的新项目的部署方式有了一定的了解。为了方便，本文就叫该项目为A项目吧。发现A项目的部署方式和我之前接触的TW“传统”CI/CD策略差异比较大（在[TW](https://thoughtworks.com)，几乎每个项目都有持续集成/持续交付流水线，如果你对它们的概念还不是很清楚，建议阅读[持续交付](https://book.douban.com/subject/6862062/)这本书，将对你梳理整个交付流程帮助巨大）。

&emsp;&emsp;关于A项目的背景，受客户保密协议的限制，我只能透露几点。A项目所属公司为国外某大型电信运营商，主要内容为用户账户自服务平台。该平台涉及诸多内外部服务，如认证、订单跟踪、短信认证等等，数量总数在三十多个左右，而每个服务都是一个独立的子系统，有独立的代码库、独立的机器实例（AWS EC2 实例）用于运行，以及一套独立的jenkins job用于自动化构建和部署（即我们接下来谈的内容）。当然，这也是为什么A项目想往微服务架构迁移的主要目的。

&emsp;&emsp;接下来，让我剥去诸多项目的其他内容，仅仅讨论一下它的CI/CD策略，也可以说是它的构建、部署方式。

## A项目的CI/CD策略
&emsp;&emsp;千言万语还是不及一张图（作者小学美术数学老师教的，望见谅）：

上图，为一个独立子项目在jenkins里面的结构图，主要由两种自动化任务（job），一种名为build为根据相应github代码库的打包构建、运行各层测试以及构建[AMI](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html)镜像，另一种主要负责将

## 传统TW项目的策略


## 各自的优缺点和适合应用的场景


这几种方式虽然各有优缺点，但相比更加传统的缺乏自动化的方式而言，已经进步太多。
