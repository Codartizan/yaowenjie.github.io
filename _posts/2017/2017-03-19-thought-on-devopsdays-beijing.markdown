---
layout: "post"
title: "DevOpsDays(Beijing) 有感 - DevOps概谈"
description: "Thought on DevOpsDays Beijing"
date: "2017-03-19 14:35"
category: DevOps
published: false
tags: [DevOps, CD, Beijing]
share: true
imagefeature: 2017/devopsdays.jpg
---
&emsp;&emsp;有幸参与了3月18号在北京举办的DevOpsDays活动，这也是DevOpsDays这个全球性的DevOps聚会第一次落地中国。官方给出的数据是，大会吸引了将近1200名参会者。在此期间，也有机会见到了被业界称为“DevOps之父”的Patrick，以及《持续交付》的中文译者乔梁。从火热程度、嘉宾阵容以及票价上来说，这样的技术活动可算是较为盛大了，但是从一个开发者的角度来说说，会议中的“干货”才是我最期望看到的内容。本文将会从个人角度来回顾这个会议中的一些内容，并针对其中DevOps相关内容给出一些自己的认识，如有不正之处，还望各位读者指正。

<!--more-->

## 会议整体流程与内容
&emsp;&emsp;首先，活动的国际化程度还是很值得认可的，除了像Patrick、John Wills这样的国外演讲嘉宾出席之外，还是可以看到不少国外的参会者，并且还配备了专业的同声传译团队和设备。参与的企业也都是与DevOps强关联的技术企业，虽然在会议内外难免会有不少相关企业的软硬广，但是除了个别以自家工具为主题缺乏实质内容的演讲总体感觉也不算过分。

&emsp;&emsp;上午的前两个简短演讲来自活动的两位联合创始人。各十分钟的演讲除了讲述DevOpsDays来到中国的历程，感觉不出来太多DevOps真正技术相关的内容，中间还自带了些小广告，让人不得不对本次活动产生一些怀疑的想法。还好接下来的几个演讲还算有货，Patrick的slide内容足够吸引人；乔梁的内容让我略感失望（真的是冷饭，且没找到重点，PPT也是不够惊艳，也可能期望比较大吧）；李俊提到的几个新的概念，可以看出他们的重点在于数据分析；John的内容主要集中在DevOps文化上。下午的三个分会场以及两个讨论会场的设置按主题区分同时进行，虽然节省了很多时间开支，但选择过多，让很多人不得不做出舍弃。另外，不知道组织方自己会不会针对活动做Retrospective，反正作为参与者，我是没有看到任何关于本次活动反馈的问卷调查，虽然几乎每个演讲都提到了反馈文化的重要性。

&emsp;&emsp;而关于内容，个人觉得DevOps领域高屋建瓴的总结多于切实有效的实际案例，作为一个在TW工作两年多的家伙，DevOps是我进入TW的第一天就已经被“灌输”了的概念（虽然当时不一定真的理解，详情可以参考14年底的文章 [初涉ThoughtWorks - 实习双周杂记]()），敏捷也可谓深入每天的工作，所以会议中提到的诸多概念、原则、结构等内容个人感觉不够惊艳，反而就像乔梁在演讲中说的那样 - 有种炒冷饭的感觉。不过，这不可谓大会中的内容没有价值，相反，这些内容都应该是各位结合实际提炼出来的精华，所以我还是打算用以下几个方面来再炒一碗“冷饭”，希望可以帮助大家进一步理解、或者作为简单的参考。而于我个人而言，自知这些内容不一定完全保证正确，毕竟一切方法论都需要因地制宜，但希望能够起到总结和督促的作用吧。

&emsp;&emsp;在参加DevOpsDays之前，我阅读了伍斌伍道长 [实例化DevOps原则](http://insights.thoughtworkers.org/instantiate-the-principles-of-devops/) 一文，深以为然。里面提到了两个相对主流的DevOps框架/原则：CALMS 和 The Three Way，之后在这次活动中的多个演讲中，都看到这两大框架的影子。本文我将不会围绕着这两个框架展开，而是以我自己的思路在4个维度叙述，当然，不可避免地，你会发现所有这些还是逃脱不了这两个框架/原则。

## 1. 人 - 组织 - 文化
&emsp;&emsp;CALMS原则第一字母C表示Culture（文化），它其实算是DevOps中的基本和核心，但对于很多企业和组织来说，也经常是最难实现的一部分。而文化的载体可以说是一个组织/团队，它的实现需要靠人，所以最基本的还是`人`。如何消除组织间的壁垒，促进人与人之间的沟通合作，是DevOps运动需要考虑的一大课题（当然，这往往也算是敏捷组织转型的企业需要考虑的）。DevOps强调合作，强调沟通，强调在组织/团队内建立信任，这其实也是敏捷所倡导的。这让我想到，曾经很多次，我们在公司内部关于敏捷的讨论中，我们都会提到一点“没有信任，就别谈啥敏捷”，是的，`自组织`、`高效的合作和沟通`肯定不是建立在充满怀疑和问责的环境中。

&emsp;&emsp;然而，"如何构建信任，如何高效合作"这不是一个简单的问题，也不会有一个普适的答案，因为这涉及企业文化类型、管理学等等相关环境。但是理想情况下，我们会追求建立全功能团队（实际真正的敏捷组织内几乎都是全功能团队），实现`组织解耦`。这里，我个人很赞同张乐在演讲中提到的，全功能团队应该具备的三个特点：

- Overall Goal
- T-shaped
- Co-located

&emsp;&emsp;这三点，第一次看到可能还不是特别容易理解。但是如果你一直工作在敏捷团队内，这三点便不难理解。`Overall Goal`表明所有团队成员都有同一个目标 - 往往是保证某个软件/更改按质按量的准时交付。`T-shaped`表示团队成员的技能应该呈现T字型，稍微形象点解释的话，就是你在专注某项技术或者某个内容的开发时（T字的那一横），也要关注团队整体技术或者产品整体业务（T字那一竖）。`Co-located`是说团队成员的位置是随时变动的，这其实是期望团队成员多和团队内外不同的人交流，加深合作沟通的一种表现（就像在结对编程中，我们也经常switch pair）。这三个特点，其实可以实现资源效率到流动效率的转换[❶]，关注的点在于产品交付完成，而不只是开发关注开发结果，运维关注运维内容，两者互相不满互相指责（其实全功能团队里没有绝对的Dev和Ops之分）。

&emsp;&emsp;不过在这次活动的私下交流中，还是能感觉到很多人仍然觉得开发就是开发，运维就是运维，DevOps只是运维工程师，顿感路漫漫其修远兮。

## 2. 代码 - 工具 - 基础设施
说到代码，

而让代码更好的工作，并了解其运行状态的各个过程中，我们往往需要借助各种各样工具。随着技术的发展，我们走在了`自动化一切可以自动化`的路上，以自动化配置管理工具为例，不管你是Ansible还是Chef、Puppet、SaltStack甚至是Shell脚本、PowerShell脚本，基本都是去除非自动化情况下的痛点。
代码层级的质量 解耦
测试金字塔，质量内建（精益）
自动化测试
自动化配置管理工具，不能过分关注工具。不管你是ansible还是chef、puppet、salt甚至是shell脚本 powershell脚本，基本都是为了解决非自动化情况下的痛点。
可视化、监控工具，

版本化工具，这个也是基本啦，git、svn甚至更老的，其实从某种意义上说也是为了协作和沟通
度量工具，其实为了每次都能够获得各种层次的反馈。
当然工具还要很多，
基础设施即代码，可以参考我翻译的Martin Fowler的文章[基础设施即代码]()
基础设施的管理还有好多种，云平台、容器化

## 3. 分支 - 流水线 - 持续交付
分支其实也是工作和合作模式的一种代码层级体现。
除了主分支，存活过长的分支都是应该避免的。
PR 和 code review
流水线是自动化的多方体现：测试 构建 部署
流水线即代码
持续交付是整个流程的概念，全局优化高于局部优化
反馈为了持续改进

## 4. 容器 - 微服务 - 新概念
组织解耦，代码解耦，这里是服务解耦。
在容器中开发容器应用，远程调试
Serverless ChatOps SRE AIOps

## 如果用一句话...
最后，思索一二，如果用我自己的一句话总结下来，DevOps说到底，可以是：为了更快、更有质量的交付可用软件，我们使用一些工具（容器、自动化工具、版本化工具、可视化工具等），遵循一些原则（基础设施即代码、流水线即代码等），打破职责间的壁垒，不断地验证软件的正确性（包括测试、构建和部署过程），且乐意并更快地收获反馈。

---

#### 注释
<div style="font-size:14px;">
1. 传统的组织结构更加关注各个团队角色所占有、产出的资源，多少会存在利益冲突，而全功能性的团队关注的是如何让产品生产线流动，享有一个共同的目标。
</div>
